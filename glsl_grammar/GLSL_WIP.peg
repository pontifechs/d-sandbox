GLSL:

Expression <
/ AssignmentOps

PrimaryExpression <
/ FunctionCall
/ Identifier
/ FloatingLiteral
/ IntegerLiteral
/ BooleanLiteral
/ "(" Expression ")"
/ Initializer


Postfix < 
/ PrimaryExpression 
(
  / "[" Expression "]"
  / "." Expression
)*
("++" / "--")?

Prefix <
/ ("++" / "--" / "+" / "-" / "~" / "!")? Postfix

Multiplicative <
/ Prefix (("*" / "/" / "%") Prefix)*

Additive <
/ Multiplicative (("+" / "-") Multiplicative)*

Shift <
/ Additive ((">>" / "<<") Additive)*

Relational <
/ Shift ((">=" / "<=" / "<" / ">") Shift)?

Equality <
/ Relational (("==" / "!=") Relational)?

BitwiseAnd <
/ Equality ("&" Equality)?

BitwiseXor <
/ BitwiseAnd ("^" BitwiseAnd)?

BitwiseOr <
/ BitwiseXor ("|" BitwiseXor)?

LogicalAnd <
/ BitwiseOr ("&&" BitwiseXor)*

LogicalXor <
/ LogicalAnd ("^^" LogicalAnd)*

LogicalOr <
/ LogicalXor ("||" LogicalXor)*

Selection <
/ LogicalOr ("?" LogicalOr ":" LogicalOr)?

AssignmentOps <
/ Selection (AssignOp Selection)?

AssignOp < ">>>="
/ "^^=" / ">>=" / "<<="
/ "~=" / "+=" / "-=" / "*=" / "^=" / "|=" / "&=" / "/="
/ "="

# Sequence :TODO

Struct <
/ "struct" Identifier

Initializer <
/ "{" ArgumentList ","? "}"

BooleanLiteral <-
/ "true"
/ "false"

FloatingLiteral <~
/ FractionalConstant ExponentPart? FloatingSuffix?
/ DigitSequence ExponentPart FloatingSuffix?

DigitSequence <-
/ [0-9]+

FloatingSuffix <-
/ 'f' / 'F' / 'lf' / 'LF'

FractionalConstant <-
/ DigitSequence '.' DigitSequence
/ DigitSequence '.'
/ '.' DigitSequence

ExponentPart <-
/ ('e' / 'E') ('+' / '-')? DigitSequence FloatingSuffix?

IntegerLiteral <~
/ DecimalConstant IntegerSuffix?
/ HexadecimalConstant IntegerSuffix?
/ OctalConstant IntegerSuffix?

DecimalConstant <-
/ [1-9] [0-9]*

OctalConstant <-
/ '0' [0-7]*

HexadecimalConstant <-
/ '0' ('x' / 'X') [0-9a-fA-F]+

IntegerSuffix <-
/ 'u' / 'U'

Constructor <
/ Type '(' ArgumentList? ')'

ArgumentList <
/ Expression (',' Expression)* 

Identifier <~ !(Keyword (![a-zA-Z_0-9])+) [a-zA-Z_] [a-zA-Z_0-9]*

Keyword <-
/ Type
/ BooleanLiteral

Type <-
/ "bool"
/ "bvec2"
/ "bvec3"
/ "bvec4"
/ "dmat2x2"
/ "dmat2x3"
/ "dmat2x4"
/ "dmat2"
/ "dmat3x2"
/ "dmat3x3"

/ "dmat3x4"
/ "dmat3"
/ "dmat4x2"
/ "dmat4x3"
/ "dmat4x4"
/ "dmat4"
/ "double"
/ "dvec2"
/ "dvec3"
/ "dvec4"

/ "float"
/ "iimage1DArray"
/ "iimage1D"
/ "iimage2DMSArray"
/ "iimage2DArray"
/ "iimage2DRect"
/ "iimage2DMS"
/ "iimage2D"
/ "iimage3D"
/ "iimageBuffer"

/ "iimageCubeArray"
/ "iimageCube"
/ "image1DArray"
/ "image1D"
/ "image2DMSArray"
/ "image2DArray"
/ "image2DRect"
/ "image2DMS"
/ "image2D"
/ "image3D"

/ "imageBuffer"
/ "imageCubeArray"
/ "imageCube"
/ "int"
/ "isampler1DArray"
/ "isampler1D"
/ "isampler2DArray"
/ "isampler2DMSArray"
/ "isampler2DRect"
/ "isampler2DMS"
/ "isampler2D"

/ "isampler3D"
/ "isamplerBuffer"
/ "isamplerCube"
/ "isamplerCubeArray"
/ "ivec2"
/ "ivec3"
/ "ivec4"
/ "mat2x2"
/ "mat2x3"
/ "mat2x4"

/ "mat2"
/ "mat3x2"
/ "mat3x3"
/ "mat3x4"
/ "mat3"
/ "mat4x2"
/ "mat4x3"
/ "mat4x4"
/ "mat4"
/ "sampler1DArrayShadow"

/ "sampler1DShadow"
/ "sampler1DArray"
/ "sampler1D"
/ "sampler2DArrayShadow"
/ "sampler2DRectShadow"
/ "sampler2DMSArray"
/ "sampler2DShadow"
/ "sampler2DArray"
/ "sampler2DRect"
/ "sampler2DMS"

/ "sampler2D"
/ "sampler3D"
/ "samplerBuffer"
/ "samplerCubeArrayShadow"
/ "samplerCubeShadow"
/ "samplerCubeArray"
/ "samplerCube"
/ "uimage1DArray"
/ "uimage1D"
/ "uimage2DArray"

/ "uimage2D"
/ "uimage2DMSArray"
/ "uimage2DRect"
/ "uimage2DMS"
/ "uimage3D"
/ "uimageBuffer"
/ "uimageCubeArray"
/ "uimageCube"
/ "uint"
/ "usampler1DArray"

/ "usampler1D"
/ "usampler2DMSArray"
/ "usampler2DArray"
/ "usampler2DRect"
/ "usampler2DMS"
/ "usampler2D"
/ "usampler3D"
/ "usamplerBuffer"
/ "usamplerCubeArray"
/ "usamplerCube"

/ "uvec2"
/ "uvec3"
/ "uvec4"
/ "vec2"
/ "vec3"
/ "vec4"

StorageQualifier <
/ "const"
/ "inout"
/ "in"
/ "out"
/ "centroid"
/ "patch"
/ "sample"
/ "uniform"
/ "buffer"
/ "shared"
/ "coherent"
/ "volatile"
/ "restrict"
/ "readonly"
/ "writeonly"
/ "subroutine" "(" Identifier ("," Identifier)* ")"
/ "subroutine"

LayoutQualifier <
/ "layout" "(" LayoutLocation ("," LayoutLocation)* ")"

LayoutLocation <
/ Identifier "=" IntegerLiteral
/ Identifier

InvariantQualifier <-
/ "invariant"

InterpolationQualifier <-
/ "smooth"
/ "flat"
/ "noperspective"

PreciseQualifier <-
/ "precise"

PrecisionQualifier <-
/ "highp"
/ "mediump"
/ "lowp"

SingleTypeQualifier <-
/ StorageQualifier
/ LayoutQualifier
/ PrecisionQualifier
/ InterpolationQualifier
/ InvariantQualifier
/ PreciseQualifier

TypeQualifier <
/ (SingleTypeQualifier)*

FunctionCall <
/ (Identifier / Type) "(" ("void" / ArgumentList)? ")"


GLSL:

Expression < SequenceOp
SequenceOp < AssignmentOp (',' AssignmentOp)*
AssignmentOp < SelectionOp (AssignmentToken SelectionOp)*
AssignmentToken < / ">>=" / "<<=" / "|=" / "^=" / "&="  
                  / "%=" / "+="/ "-=" / "*=" / "/=" / "="

SelectionOp < LogicalOrOp ('?' LogicalOrOp ':' LogicalOrOp)?
LogicalOrOp < LogicalXorOp ("||" LogicalXorOp)*
LogicalXorOp < LogicalAndOp ("^^" LogicalAndOp)*
LogicalAndOp < BitwiseOrOp ("&&" BitwiseOrOp)*
BitwiseOrOp < BitwiseXorOp ("|" BitwiseXorOp)*
BitwiseXorOp < BitwiseAndOp ("^" BitwiseAndOp)*
BitwiseAndOp < EqualityOp ("&" EqualityOp)*
EqualityOp < RelationalOp (("==" / "!=") RelationalOp)*
RelationalOp < BitshiftOp ((">=" / "<=" / "<" / ">") BitshiftOp)*
BitshiftOp < AdditionOp ((">>" / "<<") AdditionOp)*
AdditionOp < MultiplyOp (("+" / "-") MultiplyOp)*
MultiplyOp < PrefixUnaryOp (("*" / "/" / "%") PrefixUnaryOp)*
PrefixUnaryOp < ("++" / "--" / "+" / "-" / "~" / "!")? PriorityTwoOp

PriorityTwoOp < 
/ Atom ("." Atom)*
/ Atom ("++" / "--")?
/ Constructor
/ Atom ("[" Atom "]")?
/ Atom "(" ArgumentList? ")"


Atom <
/ '(' Expression ')'
/ FloatingLiteral
/ IntegerLiteral
/ FunctionCall
/ Identifier


FunctionCall <
/ Identifier "(" ArgumentList? ")"

Spacing <- (space / endOfLine / Comment)*

Comment <- BlockComment
         / LineComment

BlockComment <~ :'/ *' (!'* /' .)* :'* /'

LineComment <~ :'//' (!endOfLine .)* :endOfLine

### ---- Floating point Literals
FloatingLiteral <~
/ FractionalConstant ExponentPart? FloatingSuffix?
/ DigitSequence ExponentPart FloatingSuffix?

DigitSequence <-
/ [0-9]+

FloatingSuffix <-
/ 'f' / 'F' / 'lf' / 'LF'

FractionalConstant <-
/ DigitSequence '.' DigitSequence
/ DigitSequence '.'
/ '.' DigitSequence

ExponentPart <-
/ ('e' / 'E') ('+' / '-')? DigitSequence FloatingSuffix?

### -------- Integer literals 
IntegerLiteral <~
/ DecimalConstant IntegerSuffix?
/ HexadecimalConstant IntegerSuffix?
/ OctalConstant IntegerSuffix?

DecimalConstant <-
/ [1-9] [0-9]*

OctalConstant <-
/ '0' [0-7]*

HexadecimalConstant <-
/ '0' ('x' / 'X') [0-9a-fA-F]+

IntegerSuffix <-
/ 'u' / 'U'

Constructor <
/ Type '(' ArgumentList? ')'

ArgumentList <
/ Expression (',' Expression)* 

Identifier <~ !(Keyword blank+)[a-zA-Z_] [a-zA-Z_0-9]*

Keyword <-
/ Type

Type <-
/ "bool"
/ "bvec2"
/ "bvec3"
/ "bvec4"
/ "dmat2x2"
/ "dmat2x3"
/ "dmat2x4"
/ "dmat2"
/ "dmat3x2"
/ "dmat3x3"

/ "dmat3x4"
/ "dmat3"
/ "dmat4x2"
/ "dmat4x3"
/ "dmat4x4"
/ "dmat4"
/ "double"
/ "dvec2"
/ "dvec3"
/ "dvec4"

/ "float"
/ "iimage1DArray"
/ "iimage1D"
/ "iimage2DMSArray"
/ "iimage2DArray"
/ "iimage2DRect"
/ "iimage2DMS"
/ "iimage2D"
/ "iimage3D"
/ "iimageBuffer"

/ "iimageCubeArray"
/ "iimageCube"
/ "image1DArray"
/ "image1D"
/ "image2DMSArray"
/ "image2DArray"
/ "image2DRect"
/ "image2DMS"
/ "image2D"
/ "image3D"

/ "imageBuffer"
/ "imageCubeArray"
/ "imageCube"
/ "isampler1DArray"
/ "isampler1D"
/ "isampler2DArray"
/ "isampler2DMSArray"
/ "isampler2DRect"
/ "isampler2DMS"
/ "isampler2D"

/ "isampler3D"
/ "isamplerBuffer"
/ "isamplerCube"
/ "isamplerCubeArray"
/ "ivec2"
/ "ivec3"
/ "ivec4"
/ "mat2x2"
/ "mat2x3"
/ "mat2x4"

/ "mat2"
/ "mat3x2"
/ "mat3x3"
/ "mat3x4"
/ "mat3"
/ "mat4x2"
/ "mat4x3"
/ "mat4x4"
/ "mat4"
/ "sampler1DArrayShadow"

/ "sampler1DShadow"
/ "sampler1DArray"
/ "sampler1D"
/ "sampler2DArrayShadow"
/ "sampler2DRectShadow"
/ "sampler2DMSArray"
/ "sampler2DShadow"
/ "sampler2DArray"
/ "sampler2DRect"
/ "sampler2DMS"

/ "sampler2D"
/ "sampler3D"
/ "samplerBuffer"
/ "samplerCubeArrayShadow"
/ "samplerCubeShadow"
/ "samplerCubeArray"
/ "samplerCube"
/ "uimage1DArray"
/ "uimage1D"
/ "uimage2DArray"

/ "uimage2D"
/ "uimage2DMSArray"
/ "uimage2DRect"
/ "uimage2DMS"
/ "uimage3D"
/ "uimageBuffer"
/ "uimageCubeArray"
/ "uimageCube"
/ "uint"
/ "usampler1DArray"

/ "usampler1D"
/ "usampler2DMSArray"
/ "usampler2DArray"
/ "usampler2DRect"
/ "usampler2DMS"
/ "usampler2D"
/ "usampler3D"
/ "usamplerBuffer"
/ "usamplerCubeArray"
/ "usamplerCube"

/ "uvec2"
/ "uvec3"
/ "uvec4"
/ "vec2"
/ "vec3"
/ "vec4"
